import StyleDictionary from "style-dictionary";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

// ------------------------------------------------------------------
// 1. Register Custom Transforms, Transform Groups, and Formats
// ------------------------------------------------------------------

// (1.1) Normalize tokens: if token.$value is missing (undefined or null),
// set it from $value or original.$value.
StyleDictionary.registerTransform({
  name: "value/normalize",
  type: "value",
  matcher: (token) => token.$value === undefined || token.$value === null,
  transform: (token) => {
    if (token.$value !== undefined && token.$value !== null) {
      return token.$value;
    } else if (
      token.original &&
      token.original.$value !== undefined &&
      token.original.$value !== null
    ) {
      return token.original.$value;
    }
    return token.$value;
  },
});

// (1.2) Reference resolution transform: replace any substring of the form "{tokenName}"
// with the referenced token’s value. We add extra guards to ensure token.$value exists.
StyleDictionary.registerTransform({
  name: "value/resolve-custom",
  type: "value",
  matcher: (token) =>
    token.$value !== undefined &&
    typeof token.$value === "string" &&
    /{[^}]+}/.test(token.$value),
  transform: (token, dictionary) => {
    // Guard against missing or non-string $values.
    if (!token.$value || typeof token.$value !== "string") return token.$value;
    return token.$value.replace(/{([^}]+)}/g, (match, tokenName) => {
      // Attempt to find the token by its key (which should be like "{...}"),
      // or by joining its path with a dot (also try stripping a leading underscore).
      let refToken = dictionary.allTokens.find(
        (t) => t.key === `{${tokenName}}`
      );
      if (!refToken) {
        const cleanName = tokenName.replace(/^_/, "");
        refToken = dictionary.allTokens.find(
          (t) =>
            t.key === `{${cleanName}}` ||
            t.path.join(".") === tokenName ||
            t.path.join(".") === cleanName
        );
      }
      return refToken ? refToken.$value : match;
    });
  },
});

// (1.3) Append "px" to size tokens.
// We rely on the token's path: if the first element is "_size" and its value is a number, append "px".
StyleDictionary.registerTransform({
  name: "value/size/px",
  type: "value",
  matcher: (token) =>
    token.path && token.path[0] === "_size" && typeof token.$value === "number",
  transform: (token) => token.$value + "px",
});

// (1.4) Convert numeric font-size tokens to rem.
// We expect token paths like ["font", "size", ...] and a numeric value.
StyleDictionary.registerTransform({
  name: "value/font-size/rem",
  type: "value",
  matcher: (token) =>
    token.path &&
    token.path[0] === "font" &&
    token.path[1] === "size" &&
    typeof token.$value === "number",
  transform: (token) => {
    const base = 16;
    const numericValue = parseFloat(token.$value);
    return numericValue / base + "rem";
  },
});

// (1.5) For color tokens, simply pass through the raw value.
StyleDictionary.registerTransform({
  name: "value/color/css",
  type: "value",
  matcher: (token) =>
    token.$type === "color" &&
    token.$value !== undefined &&
    typeof token.$value === "string",
  transform: (token) => token.$value,
});

// (1.6) Register a transform group containing only value transforms.
// Order matters: normalize → resolve references → append units, etc.
StyleDictionary.registerTransformGroup({
  name: "custom/css",
  transforms: [
    "value/normalize",
    "value/resolve-custom",
    "value/size/px",
    "value/font-size/rem",
    "value/color/css",
  ],
});

// (1.7) Register a custom format for CSS variables.
// It outputs a :root rule with custom properties.
// It uses options.themePrefix (if provided) to prefix variable names.
// Also, if a token doesn't have a key, it computes one from its path.
StyleDictionary.registerFormat({
  name: "custom/css-variables",
  format: ({ dictionary, options }) => {
    const themePrefix =
      options && options.themePrefix ? options.themePrefix : "";
    // Ensure each token has a key.
    dictionary.allTokens.forEach((token) => {
      if (!token.key) {
        token.key = `{${token.path.join(".")}}`;
      }
    });
    return (
      `:root {\n` +
      dictionary.allTokens
        .map((token) => {
          // Build a variable name by joining the token's path (removing leading underscores)
          // and prefixing it with the theme prefix.
          const varName =
            (themePrefix ? themePrefix + "-" : "") +
            token.path.map((item) => item.replace(/^_/, "")).join("-");
          return `  --ds-${varName}: ${token.$value};`;
        })
        .join("\n") +
      `\n}`
    );
  },
});

// ------------------------------------------------------------------
// 2. Build Outputs: One for Each Alias Theme and One for the Primitives
// ------------------------------------------------------------------

// Resolve directories.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const tokensDir = path.join(__dirname, "tokens");
const outDir = path.join(__dirname, "build/css");

// Ensure the output directory exists.
if (!fs.existsSync(outDir)) {
  fs.mkdirSync(outDir, { recursive: true });
}

// Collect base (primitive) token files – these do NOT begin with "alias."
const baseFiles = fs
  .readdirSync(tokensDir)
  .filter((file) => !file.startsWith("alias.") && file.endsWith(".json"));

// Collect alias theme token files – these begin with "alias."
const aliasFiles = fs
  .readdirSync(tokensDir)
  .filter((file) => file.startsWith("alias.") && file.endsWith(".json"));

// Async build function.
async function buildTokens() {
  // Build CSS for each alias theme (merging base tokens with alias overrides).
  for (const aliasFile of aliasFiles) {
    const rawThemeName = aliasFile
      .replace(/^alias\./, "")
      .replace(/\.json$/, "");
    // Create a sanitized theme prefix, e.g. "best-products"
    const themePrefix = rawThemeName.toLowerCase().replace(/[^a-z0-9]+/g, "-");

    // Merge sources: first all base files, then the alias file.
    const sources = [
      ...baseFiles.map((f) => path.join(tokensDir, f)),
      path.join(tokensDir, aliasFile),
    ];

    const sd = new StyleDictionary({
      source: sources,
      platforms: {
        css: {
          transformGroup: "custom/css",
          buildPath: `${outDir}/`,
          files: [
            {
              destination: `${rawThemeName}.css`,
              format: "custom/css-variables",
              options: { themePrefix },
            },
          ],
        },
      },
    });

    await sd.buildAllPlatforms();
    console.log(`✔︎ Built CSS for theme: ${rawThemeName}`);
  }

  // Additionally, build a CSS file for the primitives (base tokens only).
  if (baseFiles.length > 0) {
    const sdPrimitives = new StyleDictionary({
      source: baseFiles.map((f) => path.join(tokensDir, f)),
      platforms: {
        css: {
          transformGroup: "custom/css",
          buildPath: `${outDir}/`,
          files: [
            {
              destination: `primitives.css`,
              format: "custom/css-variables",
              options: { themePrefix: "primitives", outputReferences: true },
            },
          ],
        },
      },
    });
    await sdPrimitives.buildAllPlatforms();
    console.log("✔︎ Built CSS for primitives");
  }
}

// Run the build process.
buildTokens();
